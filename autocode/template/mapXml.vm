<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="$!{generatorContext.domain}">
##属性-列对应
    <resultMap id="get$!{className}Result" type="$!{generatorContext.domain}">
        <id property="id" column="id"/>
    ##Velocity 代码段#(开始)###
    #foreach ($column in $table.columns)
        <!-- $!{column.columnCommnet}-->
        <result property="$!{column.fieldName}" column="$!{column.columnName}"/>
    #end

        <!--创建人-->
        <result property="creator" column="creator"/>
        <!--创时间-->
        <result property="createDate" column="create_date"/>
        <!--更新人-->
        <result property="updator" column="updator"/>
        <!--更新时间-->
        <result property="updateDate" column="update_date"/>
        <!--软删除：0表示删除，1表示存在-->
        <result property="valid" column="valid"/>
    ##Velocity 代码段#(结束)###
    </resultMap>

##查询列(方便sql编写)
    <sql id="$!{generatorContext.instanceName}BaseColumnList">
        id,
    ##Velocity 代码段#(开始)###
    #foreach ($column in $table.columns)
        $!{column.columnName},<!-- $!{column.columnCommnet}-->
    #end
        creator,
        create_date,
        updator,
        update_date,
        valid
    ##Velocity 代码段#(结束)###
    </sql>

    <!--根据主键id查询记录-->
    <select id="$!{className}_get" resultMap="get$!{className}Result">
        SELECT
        <include refid="$!{generatorContext.instanceName}BaseColumnList"/>
        FROM
        $!{tableName}
        where
        id = #{id}
    </select>

##未知？？？
    <select id="$!{className}_list" resultMap="get$!{className}Result">
        SELECT
        <include refid="$!{generatorContext.instanceName}BaseColumnList"/>
        FROM
        $!{tableName}
        <include refid="common.Select_Where_Clause"/>
    </select>

    <!--插入记录-->
    <insert id="$!{className}_insert" parameterType="$!{generatorContext.domain}">
        INSERT INTO $!{tableName}(
    #foreach ($column in $table.columns)
        $!{column.columnName},
    #end
        creator,
        create_date,
        updator,
        update_date,
        valid
        )
        VALUES(
        #foreach ($column in $table.columns)
            #{$!{column.fieldName}},
        #end
        #{creator},
        NOW(),
        #{updator},
        NOW(),
        1)
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT IFNULL(MAX(id),0)+1 FROM $!{tableName};
        </selectKey>
    </insert>

    <!--更新记录(传入的字段值未空的也更新)-->
    <update id="$!{className}_update" parameterType="$!{generatorContext.domain}">
        UPDATE $!{tableName}
        SET
    #foreach ($column in $table.columns)
        $!{column.columnName} = #{$!{column.fieldName}},
    #end
        update_date = now(),
        updator = #{updator}
        WHERE
        id = #{id}
    </update>

    <!--更新记录(传入的字段值未空的不更新)-->
    <update id="$!{className}_updateSelective" parameterType="map">
        UPDATE $!{tableName}
        SET
#foreach ($column in $table.columns)
    <if test="record.$!{column.fieldName} != null">
        $!{column.columnName} = #{$!{column.fieldName}},
    </if>
#end
        update_date = now(),
        updator = #{record.updator}
        WHERE
        id = #{record.id}
    </update>

    <!--根据主键id软删除记录-->
    <update id="$!{className}_logicDelete" parameterType="$!{generatorContext.domain}">
        UPDATE $!{tableName}
        SET
        valid=0
        ,update_date = now()
        WHERE
        id = #{id}
    </update>

    <!--根据主键id删除记录-->
    <delete id="$!{className}_delete" parameterType="$!{generatorContext.domain}">
        DELETE FROM $!{tableName}
        WHERE
        id = #{id}
    </delete>
</mapper>
