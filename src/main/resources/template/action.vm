##包定义
package $!{targetPackage};

import com.zjhcsoft.bi.fast.core.constant.WebResultStatus;
import com.zjhcsoft.bi.fast.core.model.WebResult;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.zjhcsoft.bi.fast.orm.service.support.paging.PageInfo;
import com.zjhcsoft.bi.fast.orm.service.support.query.Condition;
import com.zjhcsoft.travel.common.action.FastAction;
import com.zjhcsoft.travel.common.sys.utils.json.JsonUtils;
##import domain、service
import $!{generatorContext.domain};
import $!{generatorContext.service}Impl;

/**
 * @description:$!{table.name} action
 * @author $!{javaDoc.author}
 * @date: $!{javaDoc.createDate}
 * @history:
 */
 ## 类名
@Controller
@RequestMapping("/$!{generatorContext.module}/$!{table.urlName}")
public class $!{className}Action extends FastAction<$!{className},$!{className}ServiceImpl> {


    /**
    * index页面
    * @param request
    * @return
    */
    @RequestMapping(value = "index", method = RequestMethod.GET)
    public String index(HttpServletRequest request) {
        return getNameSpace() + "index";
    }

    /**
    * 分页查询$!{table.name}列表.
    * @param request
    * @param response
    */
    @RequestMapping(value = "queryPaged")
    public void queryPaged(HttpServletRequest request, HttpServletResponse response) throws Exception {
        try {
            Condition condition = bindCondition(request);
            WebResult res = new WebResult(WebResultStatus.STATUS_SUCCESS.getIndex());
            PageInfo<$!{className}> page = entityService.queryPaged(condition);
            res.setRetinfo(page);
            printJson(response, JsonUtils.bean2Json(res, null, "yyyy-MM-dd HH:mm:ss", $!{className}.class));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
    * 添加/编辑页面
    * @param model
    * @param request
    * @return
    * @throws Exception
    */
    @RequestMapping(value = "add")
    public String add(Model model, HttpServletRequest request) {
        String id = request.getParameter("id");
        model.addAttribute("id", id);
        return getNameSpace() + "add";
    }

    /**
    * 保存单条$!{table.name}记录.
    * @param request
    * @param response
    */
    @RequestMapping(value = "save", method = RequestMethod.POST)
    public void save(HttpServletRequest request, HttpServletResponse response) {
    try {
        $!{className} o = bindEntity(request, entityClass);
        if(!ckeckNullInput(o,response)){
            return;
        }
        if(!ckeckLengthInput(o,response)){
            return;
        }
        entityService.save(o);
        printJson(response, messageSuccuseWrap());
    } catch (Exception e) {
        logger.error("save", e);
            printJson(response, messageFailureWrap("保存失败！"));
        }
    }

    /**
    * 删除页面
    * @param request
    * @param response
    */
    @RequestMapping(value = "delete", method = RequestMethod.POST)
    public void delete(HttpServletRequest request, HttpServletResponse response) {
        try {
            String id = request.getParameter("id");
            if (!StringUtils.isBlank(id)) {
                entityService.logicRemove(Long.parseLong(id));
            }else{
                printJson(response, messageFailureWrap("删除失败！"));
            }
            printJson(response, messageSuccuseWrap());
        } catch (Exception e) {
            logger.error("delete", e);
            printJson(response, messageFailureWrap("删除失败！"));
        }
    }

    /**
    * 详细页面
    * @param id
    * @param model
    * @return
    * @throws Exception
    */
    @RequestMapping(value = "detail")
    public String detail(@RequestParam("id") Integer id,Model model) throws Exception {
        model.addAttribute("id", id);
        return getNameSpace() + "detail";
    }

    /**
    * 详细
    * @param id
    * @return
    * @throws Exception
    */
    @RequestMapping(value = "getInfo")
    public void getInfo(@RequestParam("id") Integer id, HttpServletResponse response) throws Exception {
        WebResult res = new WebResult(WebResultStatus.STATUS_SUCCESS.getIndex());
        $!{className} o = entityService.get(id);
        res.setRetinfo(o);
        printJson(response, JsonUtils.bean2Json(res,"yyyy-MM-dd HH:mm:ss"));
    }
    /**
    * 数据非空验证
    * @param o
    * @return
    */
    private boolean ckeckNullInput($!{className} o, HttpServletResponse response){
#foreach ($column in $table.columns)
    #if($!{column.fieldType}=="String")
    if (StringUtils.isBlank(o.$!{column.getName}())) {
    printJson(response, messageFailureWrap("$!{column.columnCommnet}不能为空"));
    return false;
    }
    #end
#end
        return true;
    }

    /**
    * 数据长度验证
    * @param o
    * @return
    */
    private boolean ckeckLengthInput($!{className} o, HttpServletResponse response){
#foreach ($column in $table.columns)
    #if($!{column.fieldType}=="String")
    if (o.$!{column.getName}().length()>$!{column.columnLength}) {
    printJson(response, messageFailureWrap("$!{column.columnCommnet}最大长度为$!{column.columnLength}"));
    return false;
    }
    #end
#end
        return true;
    }
}
